use Std::*;
use Integer::*;
use Prob::*;
use Store::*;

use RabinKarp::*;

type N : Nat = 2305843009213693951;

unchecked eff [*] -> [[*]] -> * -> * ! @prover
fn compute_base
( text : list[uint[N] $pre @prover]
, iocs : list[list[uint[N] $pre @verifier]]
, base : uint[N] $pre @prover
) -> uint[N] $pre @prover 
where Field[N]
{ let n = length(text)
; let m = length(iocs[0])
; let l = length(iocs)
; let mut flag : bool $pre @prover = false
; let vns = for k in 0 .. l { prefixvalue(iocs[k], m, base) }
; let mut vt = prefixvalue(text, m, base)
; let largestpower : uint[N] $pre @prover = pow_pre(base, m - 1)
; for i in 0 .. n - m + 1 
  { for j in 0 .. l 
    { flag = flag | (vt - vns[j] == 0) as bool
    //; if (flag) { break; }
    }
//    if (flag) { break; };
  ; if (i < n - m) 
    { vt = shiftvalue(text, i, m, base, vt, largestpower)
    }
  }
  if (flag) { compute_base(text, iocs, base + 1) } else { base }
}

// Assumes that iocs and all its elements are non-empty and contains iocs of equal length
fn verify_single_ioclist
( text : list[uint[N] $post @prover]
, iocs : list[list[uint[N] $post @verifier]]
) -> uint[N] $post @prover 
where Field[N]
{ let n = length(text)
; let m = length(iocs[0])
; let l = length(iocs)
; let text_pre = for i in 0 .. n { text[i] as $pre }
; let iocs_pre = for k in 0 .. l { for j in 0 .. m { iocs[k][j] as $pre } }
; let base = wire { compute_base(text_pre, iocs_pre, 0) }
; let vns = for k in 0 .. l { prefixvalue(iocs[k], m, base) }
; let mut vt = prefixvalue(text, m, base)
; let largestpower = pow_pre(base, m - 1)
; let localprods = for i in 0 .. n - m + 1 
  { let p = prod(for j in 0 .. l { vt - vns[j] })
  ; if (i < n - m) 
    { vt = shiftvalue(text, i, m, base, vt, largestpower) 
    }
  ; p
  }
; prod(localprods)
}

fn verify_ioclists
( text : list[uint[N] $post @prover]
, iocs_list : list[list[list[uint[N] $post @verifier]]]
) 
where Field[N]
{ let l = length(iocs_list)
; assert(!is_zero(prod(for i in 0 .. l { verify_single_ioclist(text, iocs_list[i]) })))
;
}

fn check_canary
( ref stor : Store[N, $post, @prover]
, ind : uint[N] $post @prover
, canary : arr[uint[N] $post @prover]
) 
where Field[N], Vectorization
{ let m = length(canary)
; let seg = freeze(for j in 0 .. m { stor{#(ind + (wire { j as uint[N] }) as @prover)} })
; let diff : arr[uint[N] $post @prover] = canary -. seg
; let res : arr[() $pre @public] = assert_zero.(diff)
;
}

fn main() 
where Field[N], Vectorization
{ let n = get_public("text_len")
; let ils : list[u64 $pre @public] = get_public("ioc_len_list")
; let cls : list[u64 $pre @public] = get_public("canary_len_list")
; let iocs_pre : list[list[uint[N] $pre @verifier] $pre @verifier] $pre @verifier = get_instance("ioc_list")
; let iocs = for i in 0 .. length(ils) { for j in 0 .. ils[i] { wire { iocs_pre[i as @verifier][j as @verifier] } } }
; let canaries_pre : list[list[uint[N] $pre @verifier] $pre @verifier] $pre @verifier = get_instance("canary_list")
; let canaries = for i in 0 .. length(cls) { array_to_prover(pre_uint_list_to_post_array(canaries_pre[i as @verifier], cls[i])) }
; let ind_list_pre : list[uint[N] $pre @prover] $pre @prover = get_witness("text_pos_list")
; let ind_list = for k in 0 .. length(cls) { wire { ind_list_pre[k as @prover] } }
; let text_pre = list_to_public_length(get_witness("text"), n)
; let text_ioc = uint_list_to_post(text_pre)
; let text_can = array_to_post(freeze(text_pre))
; verify_ioclists(text_ioc, group_by_length(sort_by_length(iocs)))
; let mut stor : Store[N, $post, @prover] = store_new(true, true, false)
; for i in 0 .. n { stor{#((wire { i as uint[N] }) as @prover)} = text_can[i] }
; for k in 0 .. length(cls) { check_canary(ref stor, ind_list[k], canaries[k]) }
;
}

