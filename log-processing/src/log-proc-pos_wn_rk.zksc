/* Log processing use case: Positive variant (proving that all given canaries occur in the text)

Features: Witness does not contain IOC positions in the text, Rabin-Karp algorithm is used for brute force searching.

*/
use Std::*;
use Integer::*;
use RabinKarp::*;

// Must be a prime greater than 256 ^ m where m is the maximal ioc length in bytes
type N : Nat = 190797007524439073807468042969529173669356994749940177394741882673528979787005053706368049835514900244303495954950709725762186311224148828811920216904542206960744666169364221195289538436845390250168663932838805192055137154390912666527533007309292687539092257043362517857366624699975402375462954490293259233303137330643531556539739921926201438606439020075174723029056838272505051571967594608350063404495977660656269020823960825567012344189908927956646011998057988548630107637380993519826582389781888135705408653045219655801758081251164080554609057468028203308718724654081055323215860189611391296030471108443146745671967766308925858547271507311563765171008318248647110097614890313562856541784154881743146033909602737947385055355960331855614540900081456378659068370317267696980001187750995491090350108417050917991562167972281070161305972518044872048331306383715094854938415738549894606070722584737978176686422134354526989443028353644037187375385397838259511833166416134323695660367676897722287918773420968982326089026150031515424165462111337527431154890666327374921446276833564519776797633875503548665093914556482031482248883127023777039667707976559857333357013727342079099064400455741830654320379350833236245819348824064783585692924881021978332974949906122664421376034687815350484991;

// Assumes that canaries is non-empty
fn verify_single
( text : arr[uint[N] $post @prover]
, canaries : list[arr[uint[N] $post @prover]]
, pows : arr[uint[N] $post @public]
) 
where Field[N], Vectorization
{ let n = length(text)
; let m = length(canaries[0])
; let k = length(canaries)
; assert(wire { (n >= m) as bool[N] })
; let vnss : list[arr[uint[N] $post @prover]] = for j in 0 .. k { freeze([arr_scalar_prod(canaries[j], pows, m); n - m + 1]) }
; let largestpower = wire { pow_pre(pows[1] as $pre, m - 1) }
; let rec vts_list = for i in 0 .. n - m + 1
  { if (i == 0) { arr_scalar_prod(text, pows, m) }
    else { shiftvalue(text, i - 1, m, pows[1] as @prover, vts_list[i - 1], largestpower as @prover) }
  }
; let vts = freeze(vts_list)
; for j in 0 .. k { assert_zero(prod(vts -. vnss[j])) }
; 
}

fn verify
( text : arr[uint[N] $post @prover]
, canaries_list : list[list[arr[uint[N] $post @prover]]]
, pows : arr[uint[N] $post @public]
) 
where Field[N], Vectorization
{ for k in 0 .. length(canaries_list) { verify_single(text, canaries_list[k], pows) }
;
}

fn main() 
where Field[N], Vectorization
{ let n = get_public("text_len")
; let ms : list[u64 $pre @public] = get_public("canary_len_list")
; let canaries_pre : list[list[uint[N] $pre @verifier] $pre @verifier] $pre @verifier = get_instance("canary_list")
; let canaries = for i in 0 .. length(ms) { array_to_prover(pre_uint_list_to_post_array(canaries_pre[i as @verifier], ms[i])) }
; let text_pre = get_witness("text")
; let text = pre_uint_list_to_post_array(text_pre, n)
; let a = group_by_length(sort_by_length(canaries))
; let max_len = length(a[length(a) - 1][0])
; let base = 256
; let pows = powers(base, max_len + 2)
; verify(text, a, pows)
}
