use Std::*;
use Integer::*;
use Bitextract::*;
use FixedPoint::*;
use Inequalities::*;
use SqrtUtil::*;
use Coord::*;

fn dist_sqr_helper[N : Nat, $S, @D](a : Coord[N, $S, @D], b : Coord[N, $S, @D]) -> uint[N] $S @D {
    sqr(a.0.coef - b.0.coef) + sqr(a.1.coef - b.1.coef)
}

// This version is used for distance calculating (includes square root)
pub fn dist_inf[N : Nat](a : Coord[N, $post, @prover], b : Coord[N, $post, @prover], p2k : uint[N] $post @public, ref sizeasserters : list[SizeAsserter[N, $post, @prover]]) -> Fixed[N, $post, @prover]
    where Field[N] {
    let len = a.0.len;
    let pplen = a.0.pplen;

    let mid = dist_sqr_helper(a, b);
    let dist_sqr_coef : uint $pre @prover = (mid as $pre / p2k as $pre as @prover) as uint;
    let dist_coef = wire{sqrt_coef(dist_sqr_coef, pplen) as uint[N]};

    trace "Checking line segment distance coefficient correctness" {
        let checked_mid = check_size(mid - dist_coef * dist_coef, ref sizeasserters[len]);
        assert_le'(checked_mid, Checked { val: dist_coef + dist_coef }, ref sizeasserters[len]);
    }

    trace "Checking if distance fits into fixed" {
        fixed3(dist_coef,len,pplen,ref sizeasserters)
    }
}